#!/usr/bin/env python3.5
#-*- coding: utf-8 -*-

# Stéganô - Stéganô is a basic Python Steganography module.
# Copyright (C) 2010-2016  Cédric Bonhomme - https://www.cedricbonhomme.org
#
# For more information : https://github.com/cedricbonhomme/Stegano
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

__author__ = "Cedric Bonhomme"
__version__ = "$Revision: 0.6 $"
__date__ = "$Date: 2016/08/04 $"
__license__ = "GPLv3"

try:
    from stegano import lsb
except:
    print("Install Stegano: sudo pip install Stegano")

from stegano import tools

import argparse
parser = argparse.ArgumentParser(prog='Stegano')
group_method = parser.add_mutually_exclusive_group(required=True)
group_method.add_argument('--hide', action='store_true', default=False,
                  help='Hides a message in an image.')
group_method.add_argument('--reveal', action='store_true', default=False,
                  help='Reveals the message hided in an image.')

# Original image
parser.add_argument("-i", "--input", dest="input_image_file",
                help="Input image file.")

group_secret = parser.add_mutually_exclusive_group()
# Non binary secret message to hide
group_secret.add_argument("-m", dest="secret_message",
                help="Your secret message to hide (non binary).")
# Binary secret message to hide
group_secret.add_argument("-f", dest="secret_file",
                help="Your secret to hide (Text or any binary file).")

# Image containing the secret
group_output = parser.add_mutually_exclusive_group()
group_output.add_argument("-o", "--output", dest="output_image_file",
                help="Output image containing the secret.")
group_output.add_argument("-b", "--binary", dest="secret_binary",
                help="Output for the binary secret (Text or any binary file).")

arguments = parser.parse_args()

if arguments.hide:
    #parser.parse_args(['--hide'])
    if arguments.secret_message != None:
        secret = arguments.secret_message
    elif arguments.secret_file != None:
        secret = tools.binary2base64(options.secret_file)

    img_encoded = lsb.hide(arguments.input_image_file, secret)
    try:
        img_encoded.save(arguments.output_image_file)
    except Exception as e:
        # If hide() returns an error (Too long message).
        print(e)

elif arguments.reveal:
    secret = lsb.reveal(arguments.input_image_file)
    if arguments.secret_binary != None:
        data = tools.base642binary(bytes(secret, "utf-8"))
        from PIL import Image
        import io
        file_like = io.BytesIO(data)
        file_like.seek(0)
        image = Image.open(file_like)
        image.save(options.secret_binary)
        """data = tools.base642binary(bytes(secret, "utf-8)"))
        with open(options.secret_binary, "wb") as f:
            f.write(data)"""
    else:
        print(secret)
